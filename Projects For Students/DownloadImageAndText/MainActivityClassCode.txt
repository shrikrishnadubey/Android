
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaActionSound;
import android.net.ConnectivityManager;
import android.net.Network;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.ProgressBar;
import android.widget.Toast;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class MainActivity extends AppCompatActivity
{
    private ConnectivityManager mConnectivityManager;
    private ImageView mIvImage;
    private ProgressDialog mProgressDialog = null;

    private static final String URL_IMAGE = "http://placeimg.com/640/360";
    private static final String URL_TEXT_FILE = "https://www.dropbox.com/s/m83h320c153o0iw/myfile.txt?dl=1";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.setMessage("Please wait...");
        mProgressDialog.setTitle("Downloading");
        mIvImage = findViewById(R.id.ivImage);
        mConnectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
    }

    public void checkInternet(View view)
    {
        NetworkInfo networkInfo = mConnectivityManager.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnected())
        {
            if (networkInfo.getType() == ConnectivityManager.TYPE_WIFI)
                Toast.makeText(this, "Wi-Fi Found!", Toast.LENGTH_SHORT).show();
            else if (networkInfo.getType() == ConnectivityManager.TYPE_MOBILE)
                Toast.makeText(this, "Mobile", Toast.LENGTH_SHORT).show();
        }
    }

    public void downloadText(View view)
    {
        new DownloadTextFile().execute(URL_TEXT_FILE);
    }

    public void downloadBitmap(View view)
    {
        new DownloadBitmap().execute(URL_IMAGE);
    }

    class DownloadTextFile extends AsyncTask<String, Void, String>
    {

        @Override
        protected String doInBackground(String... strings)
        {
            String text = null;
            String urlString = strings[0];
            try
            {
                URL url = new URL(urlString);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setConnectTimeout(3000);
                httpURLConnection.setReadTimeout(3000);
                httpURLConnection.setRequestMethod("GET");

                httpURLConnection.setDoInput(true);
                httpURLConnection.connect();

                int code = httpURLConnection.getResponseCode();
                if (code == HttpURLConnection.HTTP_OK)
                {
                    InputStream inputStream = httpURLConnection.getInputStream();
                    if (inputStream != null)
                    {
                        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
                        StringBuilder sb = new StringBuilder();
                        String line = "";
                        while ((line = br.readLine()) != null)
                        {
                            sb.append(line + "\n");
                        }

                        text = sb.toString();
                    }
                }

            }
            catch (MalformedURLException e)
            {
                e.printStackTrace();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }

            return text;
        }

        @Override
        protected void onPostExecute(String data)
        {
            Toast.makeText(MainActivity.this, data, Toast.LENGTH_SHORT).show();
        }
    }

    class DownloadBitmap extends AsyncTask<String, Void, Bitmap>
    {
        @Override
        protected void onPreExecute()
        {
            mProgressDialog.show();
        }

        @Override
        protected Bitmap doInBackground(String... strings)
        {
            String urlString = strings[0];
            Bitmap bitmap = null;
            try
            {
                URL url = new URL(urlString);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setConnectTimeout(3000);
                httpURLConnection.setReadTimeout(3000);
                httpURLConnection.setRequestMethod("GET");

                httpURLConnection.setDoInput(true);
                httpURLConnection.connect();

                int code = httpURLConnection.getResponseCode();
                if (code == HttpURLConnection.HTTP_OK)
                {
                    InputStream inputStream = httpURLConnection.getInputStream();
                    if (inputStream != null)
                    {
                        bitmap  = BitmapFactory.decodeStream(inputStream);
                    }
                }

            }
            catch (MalformedURLException e)
            {
                e.printStackTrace();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }

            return bitmap;
        }

        @Override
        protected void onPostExecute(Bitmap data)
        {
            mIvImage.setImageBitmap(data);
            mIvImage.setScaleType(ScaleType.FIT_XY);
            mProgressDialog.hide();
        }
    }
}